--PRUEBAS PROVEEDOR
CREATE OR REPLACE
PACKAGE PRUEBAS_PROVEEDOR AS
   PROCEDURE INICIALIZAR;
   PROCEDURE INSERTAR(NOMBRE_PRUEBA VARCHAR2, W_CIF VARCHAR,
   W_EMPRESA VARCHAR, W_DIRECCION VARCHAR, SALIDAESPERADA BOOLEAN);
   PROCEDURE ACTUALIZAR(NOMBRE_PRUEBA VARCHAR2,  W_IDPROVEEDOR NUMBER, W_CIF VARCHAR,
   W_EMPRESA VARCHAR, W_DIRECCION VARCHAR, SALIDAESPERADA BOOLEAN);
   PROCEDURE ELIMINAR (NOMBRE_PRUEBA VARCHAR2, W_IDPROVEEDOR NUMBER, SALIDAESPERADA BOOLEAN);
   
END PRUEBAS_PROVEEDOR;
/
CREATE OR REPLACE PACKAGE BODY PRUEBAS_PROVEEDOR
AS
  FUNCTION ASSERT_EQUALS(
      SALIDA         BOOLEAN,
      SALIDAESPERADA BOOLEAN)
    RETURN VARCHAR2
  AS
  BEGIN
    IF(SALIDA = SALIDAESPERADA) THEN
      RETURN 'EXITO';
    ELSE
      RETURN 'FALLO';
    END IF;
  END ASSERT_EQUALS;
  
  PROCEDURE INICIALIZAR
  AS
  BEGIN
    DELETE FROM PROVEEDOR;
    COMMIT WORK;
  END INICIALIZAR;
  
  PROCEDURE INSERTAR(NOMBRE_PRUEBA VARCHAR2, W_CIF VARCHAR, W_EMPRESA VARCHAR,W_DIRECCION VARCHAR, SALIDAESPERADA BOOLEAN)
  AS
    SALIDA BOOLEAN := TRUE;
    DETALLE PROVEEDOR%ROWTYPE;
    W_IDPROVEEDOR NUMBER;
  BEGIN
    --INSERT
    --INTO PROVEEDOR VALUES
      --(
        --sec_proveedor.NEXTVAL,
        --W_CIF,
        --W_EMPRESA,
        --W_DIRECCION
      --);
    INSERTAR_PROVEEDOR(W_CIF, W_EMPRESA, W_DIRECCION );
    W_IDPROVEEDOR := SEC_PROVEEDOR.CURRVAL;
    SELECT * INTO DETALLE FROM PROVEEDOR WHERE IDPROVEEDOR=W_IDPROVEEDOR;
    IF (DETALLE.CIF<>W_CIF OR DETALLE.EMPRESA<>W_EMPRESA OR DETALLE.DIRECCION<>W_DIRECCION) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || W_IDPROVEEDOR || ' ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
  EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ':' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
  END INSERTAR;
  
  PROCEDURE ACTUALIZAR(
      NOMBRE_PRUEBA  VARCHAR2,
      W_IDPROVEEDOR NUMBER,
      W_CIF VARCHAR,
      W_EMPRESA VARCHAR,
      W_DIRECCION VARCHAR,
      SALIDAESPERADA BOOLEAN)
  AS
    SALIDA BOOLEAN := TRUE;
    DETALLE PROVEEDOR%ROWTYPE;
  BEGIN
    UPDATE PROVEEDOR
    SET  CIF=W_CIF,
    EMPRESA= W_EMPRESA,
    DIRECCION=W_DIRECCION
    WHERE IDPROVEEDOR =W_IDPROVEEDOR;
    SELECT * INTO DETALLE FROM PROVEEDOR WHERE IDPROVEEDOR=W_IDPROVEEDOR;
    IF (DETALLE.CIF<>W_CIF OR DETALLE.EMPRESA<>W_EMPRESA OR DETALLE.DIRECCION<>W_DIRECCION) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || W_IDPROVEEDOR || ' ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
  EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
  END ACTUALIZAR;
  
   PROCEDURE ELIMINAR (NOMBRE_PRUEBA VARCHAR2, 
   W_IDPROVEEDOR NUMBER, 
   SALIDAESPERADA BOOLEAN)
     AS
    SALIDA    BOOLEAN := TRUE;
    N_PROVEEDOR INTEGER;
  BEGIN
    DELETE FROM PROVEEDOR WHERE IDPROVEEDOR=W_IDPROVEEDOR;
    SELECT COUNT (*) INTO N_PROVEEDOR FROM PROVEEDOR WHERE IDPROVEEDOR=W_IDPROVEEDOR;
    IF (N_PROVEEDOR<>0) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || W_IDPROVEEDOR || ' ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
  EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
ROLLBACK;
  END ELIMINAR;
END PRUEBAS_PROVEEDOR;
/