create or replace 
PACKAGE PRUEBAS_FACTURA AS

PROCEDURE inicializar;
PROCEDURE insertar
(nombre_prueba VARCHAR2, w_FECHAFACTURA DATE,w_IDVENTA NUMBER, w_salida_esperada Boolean);
PROCEDURE ACTUALIZAR (nombre_prueba VARCHAR2, w_IDFACTURA NUMBER,w_FECHAFACTURA DATE,w_IDVENTA NUMBER, w_salida_esperada Boolean);
PROCEDURE eliminar (nombre_prueba VARCHAR2,w_IDFACTURA NUMBER,  w_salida_esperada boolean);
end PRUEBAS_FACTURA;
/

CREATE OR REPLACE 
PACKAGE BODY PRUEBAS_FACTURA AS
 PROCEDURE INICIALIZAR AS
  BEGIN
  DELETE FROM FACTURA;
END INICIALIZAR;

--INSERTAR


PROCEDURE INSERTAR (nombre_prueba VARCHAR2, w_FECHAFACTURA DATE,w_IDVENTA NUMBER, w_salida_esperada Boolean)AS
SALIDA BOOLEAN := TRUE;
w_FACTURA FACTURA%ROWTYPE;
w_IDFACTURA NUMBER;
BEGIN 
INSERTAR_FACTURAS(w_FECHAFACTURA,w_IDVENTA);
w_IDFACTURA := SEC_FACTURA.CURRVAL;
SELECT * INTO w_FACTURA FROM FACTURA WHERE (IDFACTURA=w_IDFACTURA);

IF(w_FACTURA.FECHAFACTURA<>w_FECHAFACTURA OR w_FACTURA.IDVENTA<>w_IDVENTA)THEN
SALIDA:=FALSE;
END IF;
COMMIT WORK;

DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ':' || ASSERT_EQUALS(SALIDA,w_salida_esperada));

EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ':' || ASSERT_EQUALS (FALSE,w_salida_esperada));
ROLLBACK;
end INSERTAR;

--ACtualizar
PROCEDURE ACTUALIZAR (nombre_prueba VARCHAR2, w_IDFACTURA NUMBER,w_FECHAFACTURA DATE,w_IDVENTA NUMBER, w_salida_esperada Boolean) AS
SALIDA BOOLEAN := TRUE;
w_FACTURA FACTURA%ROWTYPE;

BEGIN
UPDATE FACTURA SET FECHAFACTURA=w_FECHAFACTURA,IDVENTA=w_IDVENTA WHERE (IDFACTURA=w_IDFACTURA);
SELECT * INTO w_FACTURA FROM FACTURA WHERE (IDFACTURA=w_IDFACTURA);

IF(w_FACTURA.FECHAFACTURA<>w_FECHAFACTURA OR w_FACTURA.IDVENTA<>w_IDVENTA)THEN
SALIDA:=FALSE;
END IF;
COMMIT WORK;

DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ':' || ASSERT_EQUALS(SALIDA,w_salida_esperada));

EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ':' || ASSERT_EQUALS (FALSE,w_salida_esperada));
ROLLBACK;


end actualizar;


PROCEDURE eliminar (nombre_prueba VARCHAR2,w_IDFACTURA NUMBER,  w_salida_esperada boolean) AS
SALIDA BOOLEAN := TRUE;
n_factura INTEGER;

BEGIN
ELIMINAR_FACTURA(w_IDFACTURA);
SELECT COUNT (*) INTO n_factura FROM factura WHERE (IDFACTURA=W_IDFACTURA);
IF(n_factura <> 0) THEN
SALIDA :=FALSE;
END IF;

COMMIT WORK;

DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ':' || ASSERT_EQUALS(SALIDA,w_salida_esperada));

EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ':' || ASSERT_EQUALS (FALSE,w_salida_esperada));
ROLLBACK;

END ELIMINAR;













END ;